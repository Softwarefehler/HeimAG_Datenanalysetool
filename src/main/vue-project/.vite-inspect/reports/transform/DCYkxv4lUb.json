{
  "resolvedId": "C:/Users/MAG/IdeaProjects/Datenanalysetool/src/main/vue-project/node_modules/vuetify/lib/labs/VTimePicker/VTimePickerClock.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createVNode as _createVNode } from \"vue\";\n// StylesthisValue\n// Styles\nimport \"./VTimePickerClock.css\";\n\n// Composables\nimport { useBackgroundColor, useTextColor } from \"../../composables/color.mjs\"; // Utilities\nimport { computed, ref, toRef, watch } from 'vue';\nimport { genericComponent, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\nexport const makeVTimePickerClockProps = propsFactory({\n  allowedValues: Function,\n  ampm: Boolean,\n  color: String,\n  disabled: Boolean,\n  displayedValue: null,\n  double: Boolean,\n  format: {\n    type: Function,\n    default: val => val\n  },\n  max: {\n    type: Number,\n    required: true\n  },\n  min: {\n    type: Number,\n    required: true\n  },\n  scrollable: Boolean,\n  readonly: Boolean,\n  rotate: {\n    type: Number,\n    default: 0\n  },\n  step: {\n    type: Number,\n    default: 1\n  },\n  modelValue: {\n    type: Number\n  }\n}, 'VTimePickerClock');\nexport const VTimePickerClock = genericComponent()({\n  name: 'VTimePickerClock',\n  props: makeVTimePickerClockProps(),\n  emits: {\n    change: val => val,\n    input: val => val\n  },\n  setup(props, _ref) {\n    let {\n      emit\n    } = _ref;\n    const clockRef = ref(null);\n    const innerClockRef = ref(null);\n    const inputValue = ref(undefined);\n    const isDragging = ref(false);\n    const valueOnMouseDown = ref(null);\n    const valueOnMouseUp = ref(null);\n    const {\n      textColorClasses,\n      textColorStyles\n    } = useTextColor(toRef(props, 'color'));\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(toRef(props, 'color'));\n    const count = computed(() => props.max - props.min + 1);\n    const roundCount = computed(() => props.double ? count.value / 2 : count.value);\n    const degreesPerUnit = computed(() => 360 / roundCount.value);\n    const degrees = computed(() => degreesPerUnit.value * Math.PI / 180);\n    const displayedValue = computed(() => props.modelValue == null ? props.min : props.modelValue);\n    const innerRadiusScale = computed(() => 0.62);\n    const genChildren = computed(() => {\n      const children = [];\n      for (let value = props.min; value <= props.max; value = value + props.step) {\n        children.push(value);\n      }\n      return children;\n    });\n    watch(() => props.modelValue, val => {\n      inputValue.value = val;\n    });\n    function update(value) {\n      if (inputValue.value !== value) {\n        inputValue.value = value;\n      }\n      emit('input', value);\n    }\n    function isAllowed(value) {\n      return !props.allowedValues || props.allowedValues(value);\n    }\n    function wheel(e) {\n      if (!props.scrollable || props.disabled) return;\n      e.preventDefault();\n      const delta = Math.sign(-e.deltaY || 1);\n      let value = displayedValue.value;\n      do {\n        value = value + delta;\n        value = (value - props.min + count.value) % count.value + props.min;\n      } while (!isAllowed(value) && value !== displayedValue.value);\n      if (value !== props.displayedValue) {\n        update(value);\n      }\n    }\n    function isInner(value) {\n      return props.double && value - props.min >= roundCount.value;\n    }\n    function handScale(value) {\n      return isInner(value) ? innerRadiusScale.value : 1;\n    }\n    function getPosition(value) {\n      const rotateRadians = props.rotate * Math.PI / 180;\n      return {\n        x: Math.sin((value - props.min) * degrees.value + rotateRadians) * handScale(value),\n        y: -Math.cos((value - props.min) * degrees.value + rotateRadians) * handScale(value)\n      };\n    }\n    function angleToValue(angle, insideClick) {\n      const value = (Math.round(angle / degreesPerUnit.value) + (insideClick ? roundCount.value : 0)) % count.value + props.min;\n\n      // Necessary to fix edge case when selecting left part of the value(s) at 12 o'clock\n      if (angle < 360 - degreesPerUnit.value / 2) return value;\n      return insideClick ? props.max - roundCount.value + 1 : props.min;\n    }\n    function getTransform(i) {\n      const {\n        x,\n        y\n      } = getPosition(i);\n      return {\n        left: `${50 + x * 50}%`,\n        top: `${50 + y * 50}%`\n      };\n    }\n    function euclidean(p0, p1) {\n      const dx = p1.x - p0.x;\n      const dy = p1.y - p0.y;\n      return Math.sqrt(dx * dx + dy * dy);\n    }\n    function angle(center, p1) {\n      const value = 2 * Math.atan2(p1.y - center.y - euclidean(center, p1), p1.x - center.x);\n      return Math.abs(value * 180 / Math.PI);\n    }\n    function setMouseDownValue(value) {\n      if (valueOnMouseDown.value === null) {\n        valueOnMouseDown.value = value;\n      }\n      valueOnMouseUp.value = value;\n      update(value);\n    }\n    function onDragMove(e) {\n      e.preventDefault();\n      if (!isDragging.value && e.type !== 'click' || !clockRef.value) return;\n      const {\n        width,\n        top,\n        left\n      } = clockRef.value?.getBoundingClientRect();\n      const {\n        width: innerWidth\n      } = innerClockRef.value?.getBoundingClientRect() ?? {\n        width: 0\n      };\n      const {\n        clientX,\n        clientY\n      } = 'touches' in e ? e.touches[0] : e;\n      const center = {\n        x: width / 2,\n        y: -width / 2\n      };\n      const coords = {\n        x: clientX - left,\n        y: top - clientY\n      };\n      const handAngle = Math.round(angle(center, coords) - props.rotate + 360) % 360;\n      const insideClick = props.double && euclidean(center, coords) < (innerWidth + innerWidth * innerRadiusScale.value) / 4;\n      const checksCount = Math.ceil(15 / degreesPerUnit.value);\n      let value;\n      for (let i = 0; i < checksCount; i++) {\n        value = angleToValue(handAngle + i * degreesPerUnit.value, insideClick);\n        if (isAllowed(value)) return setMouseDownValue(value);\n        value = angleToValue(handAngle - i * degreesPerUnit.value, insideClick);\n        if (isAllowed(value)) return setMouseDownValue(value);\n      }\n    }\n    function onMouseDown(e) {\n      if (props.disabled) return;\n      e.preventDefault();\n      window.addEventListener('mousemove', onDragMove);\n      window.addEventListener('touchmove', onDragMove);\n      window.addEventListener('mouseup', onMouseUp);\n      window.addEventListener('touchend', onMouseUp);\n      valueOnMouseDown.value = null;\n      valueOnMouseUp.value = null;\n      isDragging.value = true;\n      onDragMove(e);\n    }\n    function onMouseUp(e) {\n      e.stopPropagation();\n      window.removeEventListener('mousemove', onDragMove);\n      window.removeEventListener('touchmove', onDragMove);\n      window.removeEventListener('mouseup', onMouseUp);\n      window.removeEventListener('touchend', onMouseUp);\n      isDragging.value = false;\n      if (valueOnMouseUp.value !== null && isAllowed(valueOnMouseUp.value)) {\n        emit('change', valueOnMouseUp.value);\n      }\n    }\n    useRender(() => {\n      return _createVNode(\"div\", {\n        \"class\": [{\n          'v-time-picker-clock': true,\n          'v-time-picker-clock--indeterminate': props.modelValue == null,\n          'v-time-picker-clock--readonly': props.readonly\n        }],\n        \"onMousedown\": onMouseDown,\n        \"onTouchstart\": onMouseDown,\n        \"onWheel\": wheel,\n        \"ref\": clockRef\n      }, [_createVNode(\"div\", {\n        \"class\": \"v-time-picker-clock__inner\",\n        \"ref\": innerClockRef\n      }, [_createVNode(\"div\", {\n        \"class\": [{\n          'v-time-picker-clock__hand': true,\n          'v-time-picker-clock__hand--inner': isInner(props.modelValue)\n        }, textColorClasses.value],\n        \"style\": [{\n          transform: `rotate(${props.rotate + degreesPerUnit.value * (displayedValue.value - props.min)}deg) scaleY(${handScale(displayedValue.value)})`\n        }, textColorStyles.value]\n      }, null), genChildren.value.map(value => {\n        const isActive = value === displayedValue.value;\n        return _createVNode(\"div\", {\n          \"class\": [{\n            'v-time-picker-clock__item': true,\n            'v-time-picker-clock__item--active': isActive,\n            'v-time-picker-clock__item--disabled': props.disabled || !isAllowed(value)\n          }, isActive && backgroundColorClasses.value],\n          \"style\": [getTransform(value), isActive && backgroundColorStyles.value]\n        }, [_createVNode(\"span\", null, [props.format(value)])]);\n      })])]);\n    });\n  }\n});\n//# sourceMappingURL=VTimePickerClock.mjs.map",
      "start": 1722584659943,
      "end": 1722584659951,
      "sourcemaps": null
    }
  ]
}
