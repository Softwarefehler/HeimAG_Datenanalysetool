{
  "resolvedId": "C:/Users/MAG/IdeaProjects/Datenanalysetool/src/main/vue-project/node_modules/vuetify/lib/components/VCheckbox/VCheckboxBtn.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createVNode as _createVNode, mergeProps as _mergeProps, resolveDirective as _resolveDirective } from \"vue\";\n// Components\nimport { makeVSelectionControlProps, VSelectionControl } from \"../VSelectionControl/VSelectionControl.mjs\"; // Composables\nimport { IconValue } from \"../../composables/icons.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utilities\nimport { computed } from 'vue';\nimport { genericComponent, omit, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\nexport const makeVCheckboxBtnProps = propsFactory({\n  indeterminate: Boolean,\n  indeterminateIcon: {\n    type: IconValue,\n    default: '$checkboxIndeterminate'\n  },\n  ...makeVSelectionControlProps({\n    falseIcon: '$checkboxOff',\n    trueIcon: '$checkboxOn'\n  })\n}, 'VCheckboxBtn');\nexport const VCheckboxBtn = genericComponent()({\n  name: 'VCheckboxBtn',\n  props: makeVCheckboxBtnProps(),\n  emits: {\n    'update:modelValue': value => true,\n    'update:indeterminate': value => true\n  },\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const indeterminate = useProxiedModel(props, 'indeterminate');\n    const model = useProxiedModel(props, 'modelValue');\n    function onChange(v) {\n      if (indeterminate.value) {\n        indeterminate.value = false;\n      }\n    }\n    const falseIcon = computed(() => {\n      return indeterminate.value ? props.indeterminateIcon : props.falseIcon;\n    });\n    const trueIcon = computed(() => {\n      return indeterminate.value ? props.indeterminateIcon : props.trueIcon;\n    });\n    useRender(() => {\n      const controlProps = omit(VSelectionControl.filterProps(props), ['modelValue']);\n      return _createVNode(VSelectionControl, _mergeProps(controlProps, {\n        \"modelValue\": model.value,\n        \"onUpdate:modelValue\": [$event => model.value = $event, onChange],\n        \"class\": ['v-checkbox-btn', props.class],\n        \"style\": props.style,\n        \"type\": \"checkbox\",\n        \"falseIcon\": falseIcon.value,\n        \"trueIcon\": trueIcon.value,\n        \"aria-checked\": indeterminate.value ? 'mixed' : undefined\n      }), slots);\n    });\n    return {};\n  }\n});\n//# sourceMappingURL=VCheckboxBtn.mjs.map",
      "start": 1724363577102,
      "end": 1724363577107,
      "sourcemaps": null
    }
  ]
}
