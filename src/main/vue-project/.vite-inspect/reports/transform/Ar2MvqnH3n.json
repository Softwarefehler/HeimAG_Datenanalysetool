{
  "resolvedId": "C:/Users/MAG/IdeaProjects/Datenanalysetool/src/main/vue-project/node_modules/vuetify/lib/directives/touch/index.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "// Utilities\nimport { keys } from \"../../util/index.mjs\"; // Types\nconst handleGesture = wrapper => {\n  const {\n    touchstartX,\n    touchendX,\n    touchstartY,\n    touchendY\n  } = wrapper;\n  const dirRatio = 0.5;\n  const minDistance = 16;\n  wrapper.offsetX = touchendX - touchstartX;\n  wrapper.offsetY = touchendY - touchstartY;\n  if (Math.abs(wrapper.offsetY) < dirRatio * Math.abs(wrapper.offsetX)) {\n    wrapper.left && touchendX < touchstartX - minDistance && wrapper.left(wrapper);\n    wrapper.right && touchendX > touchstartX + minDistance && wrapper.right(wrapper);\n  }\n  if (Math.abs(wrapper.offsetX) < dirRatio * Math.abs(wrapper.offsetY)) {\n    wrapper.up && touchendY < touchstartY - minDistance && wrapper.up(wrapper);\n    wrapper.down && touchendY > touchstartY + minDistance && wrapper.down(wrapper);\n  }\n};\nfunction touchstart(event, wrapper) {\n  const touch = event.changedTouches[0];\n  wrapper.touchstartX = touch.clientX;\n  wrapper.touchstartY = touch.clientY;\n  wrapper.start?.({\n    originalEvent: event,\n    ...wrapper\n  });\n}\nfunction touchend(event, wrapper) {\n  const touch = event.changedTouches[0];\n  wrapper.touchendX = touch.clientX;\n  wrapper.touchendY = touch.clientY;\n  wrapper.end?.({\n    originalEvent: event,\n    ...wrapper\n  });\n  handleGesture(wrapper);\n}\nfunction touchmove(event, wrapper) {\n  const touch = event.changedTouches[0];\n  wrapper.touchmoveX = touch.clientX;\n  wrapper.touchmoveY = touch.clientY;\n  wrapper.move?.({\n    originalEvent: event,\n    ...wrapper\n  });\n}\nfunction createHandlers() {\n  let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const wrapper = {\n    touchstartX: 0,\n    touchstartY: 0,\n    touchendX: 0,\n    touchendY: 0,\n    touchmoveX: 0,\n    touchmoveY: 0,\n    offsetX: 0,\n    offsetY: 0,\n    left: value.left,\n    right: value.right,\n    up: value.up,\n    down: value.down,\n    start: value.start,\n    move: value.move,\n    end: value.end\n  };\n  return {\n    touchstart: e => touchstart(e, wrapper),\n    touchend: e => touchend(e, wrapper),\n    touchmove: e => touchmove(e, wrapper)\n  };\n}\nfunction mounted(el, binding) {\n  const value = binding.value;\n  const target = value?.parent ? el.parentElement : el;\n  const options = value?.options ?? {\n    passive: true\n  };\n  const uid = binding.instance?.$.uid; // TODO: use custom uid generator\n\n  if (!target || !uid) return;\n  const handlers = createHandlers(binding.value);\n  target._touchHandlers = target._touchHandlers ?? Object.create(null);\n  target._touchHandlers[uid] = handlers;\n  keys(handlers).forEach(eventName => {\n    target.addEventListener(eventName, handlers[eventName], options);\n  });\n}\nfunction unmounted(el, binding) {\n  const target = binding.value?.parent ? el.parentElement : el;\n  const uid = binding.instance?.$.uid;\n  if (!target?._touchHandlers || !uid) return;\n  const handlers = target._touchHandlers[uid];\n  keys(handlers).forEach(eventName => {\n    target.removeEventListener(eventName, handlers[eventName]);\n  });\n  delete target._touchHandlers[uid];\n}\nexport const Touch = {\n  mounted,\n  unmounted\n};\nexport default Touch;\n//# sourceMappingURL=index.mjs.map",
      "start": 1724767981770,
      "end": 1724767981840,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1724767981841,
      "end": 1724767981841,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1724767981841,
      "end": 1724767981841,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1724767981841,
      "end": 1724767981841,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1724767981841,
      "end": 1724767981841,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1724767981841,
      "end": 1724767981841,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1724767981841,
      "end": 1724767981841,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1724767981841,
      "end": 1724767981841,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1724767981841,
      "end": 1724767981841,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1724767981841,
      "end": 1724767981841,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1724767981841,
      "end": 1724767981841,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1724767981841,
      "end": 1724767981841,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1724767981841,
      "end": 1724767981841,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1724767981841,
      "end": 1724767981841,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1724767981841,
      "end": 1724767981841,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1724767981841,
      "end": 1724767981841,
      "order": "normal"
    }
  ]
}
