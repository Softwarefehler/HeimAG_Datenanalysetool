{
  "resolvedId": "C:/Users/MAG/IdeaProjects/Datenanalysetool/src/main/vue-project/node_modules/vuetify/lib/components/VRadioGroup/VRadioGroup.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { mergeProps as _mergeProps, resolveDirective as _resolveDirective, createVNode as _createVNode, Fragment as _Fragment } from \"vue\";\n// Styles\nimport \"./VRadioGroup.css\";\n\n// Components\nimport { makeVInputProps, VInput } from \"../VInput/VInput.mjs\";\nimport { VLabel } from \"../VLabel/index.mjs\";\nimport { VSelectionControl } from \"../VSelectionControl/index.mjs\";\nimport { makeSelectionControlGroupProps, VSelectionControlGroup } from \"../VSelectionControlGroup/VSelectionControlGroup.mjs\"; // Composables\nimport { IconValue } from \"../../composables/icons.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utilities\nimport { computed } from 'vue';\nimport { filterInputAttrs, genericComponent, getUid, omit, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\nexport const makeVRadioGroupProps = propsFactory({\n  height: {\n    type: [Number, String],\n    default: 'auto'\n  },\n  ...makeVInputProps(),\n  ...omit(makeSelectionControlGroupProps(), ['multiple']),\n  trueIcon: {\n    type: IconValue,\n    default: '$radioOn'\n  },\n  falseIcon: {\n    type: IconValue,\n    default: '$radioOff'\n  },\n  type: {\n    type: String,\n    default: 'radio'\n  }\n}, 'VRadioGroup');\nexport const VRadioGroup = genericComponent()({\n  name: 'VRadioGroup',\n  inheritAttrs: false,\n  props: makeVRadioGroupProps(),\n  emits: {\n    'update:modelValue': value => true\n  },\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots\n    } = _ref;\n    const uid = getUid();\n    const id = computed(() => props.id || `radio-group-${uid}`);\n    const model = useProxiedModel(props, 'modelValue');\n    useRender(() => {\n      const [rootAttrs, controlAttrs] = filterInputAttrs(attrs);\n      const inputProps = VInput.filterProps(props);\n      const controlProps = VSelectionControl.filterProps(props);\n      const label = slots.label ? slots.label({\n        label: props.label,\n        props: {\n          for: id.value\n        }\n      }) : props.label;\n      return _createVNode(VInput, _mergeProps({\n        \"class\": ['v-radio-group', props.class],\n        \"style\": props.style\n      }, rootAttrs, inputProps, {\n        \"modelValue\": model.value,\n        \"onUpdate:modelValue\": $event => model.value = $event,\n        \"id\": id.value\n      }), {\n        ...slots,\n        default: _ref2 => {\n          let {\n            id,\n            messagesId,\n            isDisabled,\n            isReadonly\n          } = _ref2;\n          return _createVNode(_Fragment, null, [label && _createVNode(VLabel, {\n            \"id\": id.value\n          }, {\n            default: () => [label]\n          }), _createVNode(VSelectionControlGroup, _mergeProps(controlProps, {\n            \"id\": id.value,\n            \"aria-describedby\": messagesId.value,\n            \"defaultsTarget\": \"VRadio\",\n            \"trueIcon\": props.trueIcon,\n            \"falseIcon\": props.falseIcon,\n            \"type\": props.type,\n            \"disabled\": isDisabled.value,\n            \"readonly\": isReadonly.value,\n            \"aria-labelledby\": label ? id.value : undefined,\n            \"multiple\": false\n          }, controlAttrs, {\n            \"modelValue\": model.value,\n            \"onUpdate:modelValue\": $event => model.value = $event\n          }), slots)]);\n        }\n      });\n    });\n    return {};\n  }\n});\n//# sourceMappingURL=VRadioGroup.mjs.map",
      "start": 1723072337619,
      "end": 1723072337672,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1723072337672,
      "end": 1723072337672,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1723072337672,
      "end": 1723072337672,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1723072337672,
      "end": 1723072337672,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1723072337672,
      "end": 1723072337672,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1723072337672,
      "end": 1723072337672,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1723072337672,
      "end": 1723072337672,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1723072337672,
      "end": 1723072337672,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1723072337672,
      "end": 1723072337672,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1723072337672,
      "end": 1723072337672,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1723072337672,
      "end": 1723072337672,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1723072337672,
      "end": 1723072337672,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1723072337672,
      "end": 1723072337672,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1723072337672,
      "end": 1723072337672,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1723072337672,
      "end": 1723072337672,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1723072337672,
      "end": 1723072337672,
      "order": "normal"
    }
  ]
}
