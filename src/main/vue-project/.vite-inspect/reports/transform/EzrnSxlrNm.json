{
  "resolvedId": "C:/Users/MAG/IdeaProjects/Datenanalysetool/src/main/vue-project/node_modules/vuetify/lib/components/VSparkline/VBarline.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { Fragment as _Fragment, createVNode as _createVNode } from \"vue\";\n// Utilities\nimport { computed } from 'vue';\nimport { makeLineProps } from \"./util/line.mjs\";\nimport { genericComponent, getPropertyFromItem, getUid, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\nexport const makeVBarlineProps = propsFactory({\n  autoLineWidth: Boolean,\n  ...makeLineProps()\n}, 'VBarline');\nexport const VBarline = genericComponent()({\n  name: 'VBarline',\n  props: makeVBarlineProps(),\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const uid = getUid();\n    const id = computed(() => props.id || `barline-${uid}`);\n    const autoDrawDuration = computed(() => Number(props.autoDrawDuration) || 500);\n    const hasLabels = computed(() => {\n      return Boolean(props.showLabels || props.labels.length > 0 || !!slots?.label);\n    });\n    const lineWidth = computed(() => parseFloat(props.lineWidth) || 4);\n    const totalWidth = computed(() => Math.max(props.modelValue.length * lineWidth.value, Number(props.width)));\n    const boundary = computed(() => {\n      return {\n        minX: 0,\n        maxX: totalWidth.value,\n        minY: 0,\n        maxY: parseInt(props.height, 10)\n      };\n    });\n    const items = computed(() => props.modelValue.map(item => getPropertyFromItem(item, props.itemValue, item)));\n    function genBars(values, boundary) {\n      const {\n        minX,\n        maxX,\n        minY,\n        maxY\n      } = boundary;\n      const totalValues = values.length;\n      let maxValue = props.max != null ? Number(props.max) : Math.max(...values);\n      let minValue = props.min != null ? Number(props.min) : Math.min(...values);\n      if (minValue > 0 && props.min == null) minValue = 0;\n      if (maxValue < 0 && props.max == null) maxValue = 0;\n      const gridX = maxX / totalValues;\n      const gridY = (maxY - minY) / (maxValue - minValue || 1);\n      const horizonY = maxY - Math.abs(minValue * gridY);\n      return values.map((value, index) => {\n        const height = Math.abs(gridY * value);\n        return {\n          x: minX + index * gridX,\n          y: horizonY - height + +(value < 0) * height,\n          height,\n          value\n        };\n      });\n    }\n    const parsedLabels = computed(() => {\n      const labels = [];\n      const points = genBars(items.value, boundary.value);\n      const len = points.length;\n      for (let i = 0; labels.length < len; i++) {\n        const item = points[i];\n        let value = props.labels[i];\n        if (!value) {\n          value = typeof item === 'object' ? item.value : item;\n        }\n        labels.push({\n          x: item.x,\n          value: String(value)\n        });\n      }\n      return labels;\n    });\n    const bars = computed(() => genBars(items.value, boundary.value));\n    const offsetX = computed(() => (Math.abs(bars.value[0].x - bars.value[1].x) - lineWidth.value) / 2);\n    useRender(() => {\n      const gradientData = !props.gradient.slice().length ? [''] : props.gradient.slice().reverse();\n      return _createVNode(\"svg\", {\n        \"display\": \"block\"\n      }, [_createVNode(\"defs\", null, [_createVNode(\"linearGradient\", {\n        \"id\": id.value,\n        \"gradientUnits\": \"userSpaceOnUse\",\n        \"x1\": props.gradientDirection === 'left' ? '100%' : '0',\n        \"y1\": props.gradientDirection === 'top' ? '100%' : '0',\n        \"x2\": props.gradientDirection === 'right' ? '100%' : '0',\n        \"y2\": props.gradientDirection === 'bottom' ? '100%' : '0'\n      }, [gradientData.map((color, index) => _createVNode(\"stop\", {\n        \"offset\": index / Math.max(gradientData.length - 1, 1),\n        \"stop-color\": color || 'currentColor'\n      }, null))])]), _createVNode(\"clipPath\", {\n        \"id\": `${id.value}-clip`\n      }, [bars.value.map(item => _createVNode(\"rect\", {\n        \"x\": item.x + offsetX.value,\n        \"y\": item.y,\n        \"width\": lineWidth.value,\n        \"height\": item.height,\n        \"rx\": typeof props.smooth === 'number' ? props.smooth : props.smooth ? 2 : 0,\n        \"ry\": typeof props.smooth === 'number' ? props.smooth : props.smooth ? 2 : 0\n      }, [props.autoDraw && _createVNode(_Fragment, null, [_createVNode(\"animate\", {\n        \"attributeName\": \"y\",\n        \"from\": item.y + item.height,\n        \"to\": item.y,\n        \"dur\": `${autoDrawDuration.value}ms`,\n        \"fill\": \"freeze\"\n      }, null), _createVNode(\"animate\", {\n        \"attributeName\": \"height\",\n        \"from\": \"0\",\n        \"to\": item.height,\n        \"dur\": `${autoDrawDuration.value}ms`,\n        \"fill\": \"freeze\"\n      }, null)])]))]), hasLabels.value && _createVNode(\"g\", {\n        \"key\": \"labels\",\n        \"style\": {\n          textAnchor: 'middle',\n          dominantBaseline: 'mathematical',\n          fill: 'currentColor'\n        }\n      }, [parsedLabels.value.map((item, i) => _createVNode(\"text\", {\n        \"x\": item.x + offsetX.value + lineWidth.value / 2,\n        \"y\": parseInt(props.height, 10) - 2 + (parseInt(props.labelSize, 10) || 7 * 0.75),\n        \"font-size\": Number(props.labelSize) || 7\n      }, [slots.label?.({\n        index: i,\n        value: item.value\n      }) ?? item.value]))]), _createVNode(\"g\", {\n        \"clip-path\": `url(#${id.value}-clip)`,\n        \"fill\": `url(#${id.value})`\n      }, [_createVNode(\"rect\", {\n        \"x\": 0,\n        \"y\": 0,\n        \"width\": Math.max(props.modelValue.length * lineWidth.value, Number(props.width)),\n        \"height\": props.height\n      }, null)])]);\n    });\n  }\n});\n//# sourceMappingURL=VBarline.mjs.map",
      "start": 1724415000548,
      "end": 1724415000574,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1724415000574,
      "end": 1724415000574,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1724415000574,
      "end": 1724415000574,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1724415000574,
      "end": 1724415000574,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1724415000574,
      "end": 1724415000574,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1724415000574,
      "end": 1724415000574,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1724415000574,
      "end": 1724415000574,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1724415000574,
      "end": 1724415000574,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1724415000574,
      "end": 1724415000574,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1724415000574,
      "end": 1724415000574,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1724415000574,
      "end": 1724415000574,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1724415000574,
      "end": 1724415000574,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1724415000574,
      "end": 1724415000574,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1724415000574,
      "end": 1724415000574,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1724415000574,
      "end": 1724415000574,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1724415000574,
      "end": 1724415000574,
      "order": "normal"
    }
  ]
}
