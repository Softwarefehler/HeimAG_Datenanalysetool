{
  "resolvedId": "C:/Users/MAG/IdeaProjects/Datenanalysetool/src/main/vue-project/node_modules/vuetify/lib/components/VTooltip/VTooltip.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\";\n// Styles\nimport \"./VTooltip.css\";\n\n// Components\nimport { VOverlay } from \"../VOverlay/index.mjs\";\nimport { makeVOverlayProps } from \"../VOverlay/VOverlay.mjs\"; // Composables\nimport { forwardRefs } from \"../../composables/forwardRefs.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\";\nimport { useScopeId } from \"../../composables/scopeId.mjs\"; // Utilities\nimport { computed, mergeProps, ref } from 'vue';\nimport { genericComponent, getUid, omit, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\nexport const makeVTooltipProps = propsFactory({\n  id: String,\n  text: String,\n  ...omit(makeVOverlayProps({\n    closeOnBack: false,\n    location: 'end',\n    locationStrategy: 'connected',\n    eager: true,\n    minWidth: 0,\n    offset: 10,\n    openOnClick: false,\n    openOnHover: true,\n    origin: 'auto',\n    scrim: false,\n    scrollStrategy: 'reposition',\n    transition: false\n  }), ['absolute', 'persistent'])\n}, 'VTooltip');\nexport const VTooltip = genericComponent()({\n  name: 'VTooltip',\n  props: makeVTooltipProps(),\n  emits: {\n    'update:modelValue': value => true\n  },\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const isActive = useProxiedModel(props, 'modelValue');\n    const {\n      scopeId\n    } = useScopeId();\n    const uid = getUid();\n    const id = computed(() => props.id || `v-tooltip-${uid}`);\n    const overlay = ref();\n    const location = computed(() => {\n      return props.location.split(' ').length > 1 ? props.location : props.location + ' center';\n    });\n    const origin = computed(() => {\n      return props.origin === 'auto' || props.origin === 'overlap' || props.origin.split(' ').length > 1 || props.location.split(' ').length > 1 ? props.origin : props.origin + ' center';\n    });\n    const transition = computed(() => {\n      if (props.transition) return props.transition;\n      return isActive.value ? 'scale-transition' : 'fade-transition';\n    });\n    const activatorProps = computed(() => mergeProps({\n      'aria-describedby': id.value\n    }, props.activatorProps));\n    useRender(() => {\n      const overlayProps = VOverlay.filterProps(props);\n      return _createVNode(VOverlay, _mergeProps({\n        \"ref\": overlay,\n        \"class\": ['v-tooltip', props.class],\n        \"style\": props.style,\n        \"id\": id.value\n      }, overlayProps, {\n        \"modelValue\": isActive.value,\n        \"onUpdate:modelValue\": $event => isActive.value = $event,\n        \"transition\": transition.value,\n        \"absolute\": true,\n        \"location\": location.value,\n        \"origin\": origin.value,\n        \"persistent\": true,\n        \"role\": \"tooltip\",\n        \"activatorProps\": activatorProps.value,\n        \"_disableGlobalStack\": true\n      }, scopeId), {\n        activator: slots.activator,\n        default: function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n          return slots.default?.(...args) ?? props.text;\n        }\n      });\n    });\n    return forwardRefs({}, overlay);\n  }\n});\n//# sourceMappingURL=VTooltip.mjs.map",
      "start": 1723904397489,
      "end": 1723904397552,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1723904397552,
      "end": 1723904397552,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1723904397552,
      "end": 1723904397552,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1723904397552,
      "end": 1723904397552,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1723904397552,
      "end": 1723904397552,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1723904397552,
      "end": 1723904397552,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1723904397552,
      "end": 1723904397552,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1723904397552,
      "end": 1723904397552,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1723904397552,
      "end": 1723904397552,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1723904397552,
      "end": 1723904397552,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1723904397552,
      "end": 1723904397552,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1723904397552,
      "end": 1723904397552,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1723904397552,
      "end": 1723904397552,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1723904397552,
      "end": 1723904397552,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1723904397552,
      "end": 1723904397552,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1723904397552,
      "end": 1723904397552,
      "order": "normal"
    }
  ]
}
