{
  "resolvedId": "C:/Users/MAG/IdeaProjects/Datenanalysetool/src/main/vue-project/node_modules/vuetify/lib/components/VDataTable/VDataTableRows.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { mergeProps as _mergeProps, resolveDirective as _resolveDirective, Fragment as _Fragment, createVNode as _createVNode } from \"vue\";\n// Components\nimport { VDataTableGroupHeaderRow } from \"./VDataTableGroupHeaderRow.mjs\";\nimport { VDataTableRow } from \"./VDataTableRow.mjs\"; // Composables\nimport { useExpanded } from \"./composables/expand.mjs\";\nimport { useGroupBy } from \"./composables/group.mjs\";\nimport { useHeaders } from \"./composables/headers.mjs\";\nimport { useSelection } from \"./composables/select.mjs\";\nimport { makeDisplayProps, useDisplay } from \"../../composables/display.mjs\";\nimport { useLocale } from \"../../composables/locale.mjs\"; // Utilities\nimport { Fragment, mergeProps } from 'vue';\nimport { genericComponent, getPrefixedEventHandlers, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\nexport const makeVDataTableRowsProps = propsFactory({\n  loading: [Boolean, String],\n  loadingText: {\n    type: String,\n    default: '$vuetify.dataIterator.loadingText'\n  },\n  hideNoData: Boolean,\n  items: {\n    type: Array,\n    default: () => []\n  },\n  noDataText: {\n    type: String,\n    default: '$vuetify.noDataText'\n  },\n  rowProps: [Object, Function],\n  cellProps: [Object, Function],\n  ...makeDisplayProps()\n}, 'VDataTableRows');\nexport const VDataTableRows = genericComponent()({\n  name: 'VDataTableRows',\n  inheritAttrs: false,\n  props: makeVDataTableRowsProps(),\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots\n    } = _ref;\n    const {\n      columns\n    } = useHeaders();\n    const {\n      expandOnClick,\n      toggleExpand,\n      isExpanded\n    } = useExpanded();\n    const {\n      isSelected,\n      toggleSelect\n    } = useSelection();\n    const {\n      toggleGroup,\n      isGroupOpen\n    } = useGroupBy();\n    const {\n      t\n    } = useLocale();\n    const {\n      mobile\n    } = useDisplay(props);\n    useRender(() => {\n      if (props.loading && (!props.items.length || slots.loading)) {\n        return _createVNode(\"tr\", {\n          \"class\": \"v-data-table-rows-loading\",\n          \"key\": \"loading\"\n        }, [_createVNode(\"td\", {\n          \"colspan\": columns.value.length\n        }, [slots.loading?.() ?? t(props.loadingText)])]);\n      }\n      if (!props.loading && !props.items.length && !props.hideNoData) {\n        return _createVNode(\"tr\", {\n          \"class\": \"v-data-table-rows-no-data\",\n          \"key\": \"no-data\"\n        }, [_createVNode(\"td\", {\n          \"colspan\": columns.value.length\n        }, [slots['no-data']?.() ?? t(props.noDataText)])]);\n      }\n      return _createVNode(_Fragment, null, [props.items.map((item, index) => {\n        if (item.type === 'group') {\n          const slotProps = {\n            index,\n            item,\n            columns: columns.value,\n            isExpanded,\n            toggleExpand,\n            isSelected,\n            toggleSelect,\n            toggleGroup,\n            isGroupOpen\n          };\n          return slots['group-header'] ? slots['group-header'](slotProps) : _createVNode(VDataTableGroupHeaderRow, _mergeProps({\n            \"key\": `group-header_${item.id}`,\n            \"item\": item\n          }, getPrefixedEventHandlers(attrs, ':group-header', () => slotProps)), slots);\n        }\n        const slotProps = {\n          index,\n          item: item.raw,\n          internalItem: item,\n          columns: columns.value,\n          isExpanded,\n          toggleExpand,\n          isSelected,\n          toggleSelect\n        };\n        const itemSlotProps = {\n          ...slotProps,\n          props: mergeProps({\n            key: `item_${item.key ?? item.index}`,\n            onClick: expandOnClick.value ? () => {\n              toggleExpand(item);\n            } : undefined,\n            index,\n            item,\n            cellProps: props.cellProps,\n            mobile: mobile.value\n          }, getPrefixedEventHandlers(attrs, ':row', () => slotProps), typeof props.rowProps === 'function' ? props.rowProps({\n            item: slotProps.item,\n            index: slotProps.index,\n            internalItem: slotProps.internalItem\n          }) : props.rowProps)\n        };\n        return _createVNode(_Fragment, {\n          \"key\": itemSlotProps.props.key\n        }, [slots.item ? slots.item(itemSlotProps) : _createVNode(VDataTableRow, itemSlotProps.props, slots), isExpanded(item) && slots['expanded-row']?.(slotProps)]);\n      })]);\n    });\n    return {};\n  }\n});\n//# sourceMappingURL=VDataTableRows.mjs.map",
      "start": 1724767982786,
      "end": 1724767982833,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1724767982833,
      "end": 1724767982833,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1724767982833,
      "end": 1724767982833,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1724767982833,
      "end": 1724767982833,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1724767982833,
      "end": 1724767982833,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1724767982833,
      "end": 1724767982833,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1724767982833,
      "end": 1724767982833,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1724767982833,
      "end": 1724767982833,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1724767982833,
      "end": 1724767982833,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1724767982833,
      "end": 1724767982833,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1724767982833,
      "end": 1724767982833,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1724767982833,
      "end": 1724767982833,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1724767982833,
      "end": 1724767982833,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1724767982833,
      "end": 1724767982833,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1724767982833,
      "end": 1724767982833,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1724767982833,
      "end": 1724767982833,
      "order": "normal"
    }
  ]
}
