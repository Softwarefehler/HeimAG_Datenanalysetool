{
  "resolvedId": "C:/Users/MAG/IdeaProjects/Datenanalysetool/src/main/vue-project/node_modules/vuetify/lib/labs/VSnackbarQueue/VSnackbarQueue.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { mergeProps as _mergeProps, createVNode as _createVNode, Fragment as _Fragment } from \"vue\";\n// Components\nimport { VBtn } from \"../../components/VBtn/index.mjs\";\nimport { VDefaultsProvider } from \"../../components/VDefaultsProvider/index.mjs\";\nimport { makeVSnackbarProps, VSnackbar } from \"../../components/VSnackbar/VSnackbar.mjs\"; // Composables\nimport { useLocale } from \"../../composables/locale.mjs\"; // Utilities\nimport { computed, nextTick, shallowRef, watch } from 'vue';\nimport { genericComponent, omit, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\nexport const makeVSnackbarQueueProps = propsFactory({\n  // TODO: Port this to Snackbar on dev\n  closable: [Boolean, String],\n  closeText: {\n    type: String,\n    default: '$vuetify.dismiss'\n  },\n  modelValue: {\n    type: Array,\n    default: () => []\n  },\n  ...omit(makeVSnackbarProps(), ['modelValue'])\n}, 'VSnackbarQueue');\nexport const VSnackbarQueue = genericComponent()({\n  name: 'VSnackbarQueue',\n  props: makeVSnackbarQueueProps(),\n  emits: {\n    'update:modelValue': val => true\n  },\n  setup(props, _ref) {\n    let {\n      emit,\n      slots\n    } = _ref;\n    const {\n      t\n    } = useLocale();\n    const isActive = shallowRef(false);\n    const isVisible = shallowRef(false);\n    const current = shallowRef();\n    watch(() => props.modelValue.length, (val, oldVal) => {\n      if (!isVisible.value && val > oldVal) {\n        showNext();\n      }\n    });\n    watch(isActive, val => {\n      if (val) isVisible.value = true;\n    });\n    function onAfterLeave() {\n      if (props.modelValue.length) {\n        showNext();\n      } else {\n        current.value = undefined;\n        isVisible.value = false;\n      }\n    }\n    function showNext() {\n      const [next, ...rest] = props.modelValue;\n      emit('update:modelValue', rest);\n      current.value = typeof next === 'string' ? {\n        text: next\n      } : next;\n      nextTick(() => {\n        isActive.value = true;\n      });\n    }\n    function onClickClose() {\n      isActive.value = false;\n    }\n    const btnProps = computed(() => ({\n      color: typeof props.closable === 'string' ? props.closable : undefined,\n      text: t(props.closeText)\n    }));\n    useRender(() => {\n      const hasActions = !!(props.closable || slots.actions);\n      const {\n        modelValue: _,\n        ...snackbarProps\n      } = VSnackbar.filterProps(props);\n      return _createVNode(_Fragment, null, [isVisible.value && !!current.value && (slots.default ? _createVNode(VDefaultsProvider, {\n        \"defaults\": {\n          VSnackbar: current.value\n        }\n      }, {\n        default: () => [slots.default({\n          item: current.value\n        })]\n      }) : _createVNode(VSnackbar, _mergeProps(snackbarProps, current.value, {\n        \"modelValue\": isActive.value,\n        \"onUpdate:modelValue\": $event => isActive.value = $event,\n        \"onAfterLeave\": onAfterLeave\n      }), {\n        text: slots.text ? () => slots.text?.({\n          item: current.value\n        }) : undefined,\n        actions: hasActions ? () => _createVNode(_Fragment, null, [!slots.actions ? _createVNode(VBtn, _mergeProps(btnProps.value, {\n          \"onClick\": onClickClose\n        }), null) : _createVNode(VDefaultsProvider, {\n          \"defaults\": {\n            VBtn: btnProps.value\n          }\n        }, {\n          default: () => [slots.actions({\n            item: current.value,\n            props: {\n              onClick: onClickClose\n            }\n          })]\n        })]) : undefined\n      }))]);\n    });\n  }\n});\n//# sourceMappingURL=VSnackbarQueue.mjs.map",
      "start": 1724414998485,
      "end": 1724414998695,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1724414998695,
      "end": 1724414998695,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1724414998695,
      "end": 1724414998695,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1724414998695,
      "end": 1724414998695,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1724414998695,
      "end": 1724414998695,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1724414998695,
      "end": 1724414998695,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1724414998695,
      "end": 1724414998695,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1724414998695,
      "end": 1724414998695,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1724414998695,
      "end": 1724414998695,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1724414998695,
      "end": 1724414998695,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1724414998695,
      "end": 1724414998695,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1724414998695,
      "end": 1724414998695,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1724414998695,
      "end": 1724414998695,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1724414998695,
      "end": 1724414998695,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1724414998695,
      "end": 1724414998695,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1724414998695,
      "end": 1724414998695,
      "order": "normal"
    }
  ]
}
