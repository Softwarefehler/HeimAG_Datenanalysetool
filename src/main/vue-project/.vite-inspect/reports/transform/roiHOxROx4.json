{
  "resolvedId": "C:/Users/MAG/IdeaProjects/Datenanalysetool/src/main/vue-project/node_modules/vuetify/lib/labs/VStepperVertical/VStepperVerticalItem.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { mergeProps as _mergeProps, resolveDirective as _resolveDirective, createVNode as _createVNode, Fragment as _Fragment } from \"vue\";\n// Styles\nimport \"./VStepperVerticalItem.css\";\n\n// Components\nimport { VStepperVerticalActions } from \"./VStepperVerticalActions.mjs\";\nimport { VAvatar } from \"../../components/VAvatar/VAvatar.mjs\";\nimport { VDefaultsProvider } from \"../../components/VDefaultsProvider/VDefaultsProvider.mjs\";\nimport { makeVExpansionPanelProps, VExpansionPanel } from \"../../components/VExpansionPanel/VExpansionPanel.mjs\";\nimport { VIcon } from \"../../components/VIcon/VIcon.mjs\";\nimport { makeStepperItemProps } from \"../../components/VStepper/VStepperItem.mjs\"; // Utilities\nimport { computed, ref } from 'vue';\nimport { genericComponent, omit, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\nexport const makeVStepperVerticalItemProps = propsFactory({\n  hideActions: Boolean,\n  ...makeStepperItemProps(),\n  ...omit(makeVExpansionPanelProps({\n    expandIcon: '',\n    collapseIcon: ''\n  }), ['hideActions'])\n}, 'VStepperVerticalItem');\nexport const VStepperVerticalItem = genericComponent()({\n  name: 'VStepperVerticalItem',\n  props: makeVStepperVerticalItemProps(),\n  emits: {\n    'click:next': () => true,\n    'click:prev': () => true,\n    'click:finish': () => true\n  },\n  setup(props, _ref) {\n    let {\n      emit,\n      slots\n    } = _ref;\n    const vExpansionPanelRef = ref();\n    const step = computed(() => !isNaN(parseInt(props.value)) ? Number(props.value) : props.value);\n    const groupItem = computed(() => vExpansionPanelRef.value?.groupItem);\n    const isSelected = computed(() => groupItem.value?.isSelected.value ?? false);\n    const isValid = computed(() => isSelected.value ? props.rules.every(handler => handler() === true) : null);\n    const canEdit = computed(() => !props.disabled && props.editable);\n    const hasError = computed(() => props.error || isSelected.value && !isValid.value);\n    const hasCompleted = computed(() => props.complete || props.rules.length > 0 && isValid.value === true);\n    const disabled = computed(() => {\n      if (props.disabled) return props.disabled;\n      if (groupItem.value?.isFirst.value) return 'prev';\n      return false;\n    });\n    const icon = computed(() => {\n      if (hasError.value) return props.errorIcon;\n      if (hasCompleted.value) return props.completeIcon;\n      if (groupItem.value?.isSelected.value && props.editable) return props.editIcon;\n      return props.icon;\n    });\n    const slotProps = computed(() => ({\n      canEdit: canEdit.value,\n      hasError: hasError.value,\n      hasCompleted: hasCompleted.value,\n      title: props.title,\n      subtitle: props.subtitle,\n      step: step.value,\n      value: props.value\n    }));\n    const actionProps = computed(() => ({\n      ...slotProps.value,\n      prev: onClickPrev,\n      next: onClickNext\n    }));\n    function onClickNext() {\n      emit('click:next');\n      if (groupItem.value?.isLast.value) return;\n      groupItem.value.group.next();\n    }\n    function onClickPrev() {\n      emit('click:prev');\n      groupItem.value.group.prev();\n    }\n    useRender(() => {\n      const hasColor = (hasCompleted.value || groupItem.value?.isSelected.value) && !hasError.value && !props.disabled;\n      const hasActions = !props.hideActions || !!slots.actions;\n      const expansionPanelProps = VExpansionPanel.filterProps(props);\n      return _createVNode(VExpansionPanel, _mergeProps({\n        \"_as\": \"VStepperVerticalItem\",\n        \"ref\": vExpansionPanelRef\n      }, expansionPanelProps, {\n        \"class\": ['v-stepper-vertical-item', {\n          'v-stepper-vertical-item--complete': hasCompleted.value,\n          'v-stepper-vertical-item--disabled': props.disabled,\n          'v-stepper-vertical-item--editable': canEdit.value,\n          'v-stepper-vertical-item--error': hasError.value\n        }, props.class],\n        \"readonly\": !props.editable,\n        \"style\": props.style,\n        \"color\": \"\",\n        \"hide-actions\": false,\n        \"value\": step.value\n      }), {\n        title: () => _createVNode(_Fragment, null, [_createVNode(VAvatar, {\n          \"key\": \"stepper-avatar\",\n          \"class\": \"v-stepper-vertical-item__avatar\",\n          \"color\": hasColor ? props.color : undefined,\n          \"size\": 24,\n          \"start\": true\n        }, {\n          default: () => [slots.icon?.(slotProps.value) ?? (icon.value ? _createVNode(VIcon, {\n            \"icon\": icon.value\n          }, null) : step.value)]\n        }), _createVNode(\"div\", null, [_createVNode(\"div\", {\n          \"class\": \"v-stepper-vertical-item__title\"\n        }, [slots.title?.(slotProps.value) ?? props.title]), _createVNode(\"div\", {\n          \"class\": \"v-stepper-vertical-item__subtitle\"\n        }, [slots.subtitle?.(slotProps.value) ?? props.subtitle])])]),\n        text: () => _createVNode(_Fragment, null, [slots.default?.(slotProps.value) ?? props.text, hasActions && _createVNode(VDefaultsProvider, {\n          \"defaults\": {\n            VStepperVerticalActions: {\n              disabled: disabled.value,\n              finish: groupItem.value?.isLast.value\n            }\n          }\n        }, {\n          default: () => [slots.actions?.(actionProps.value) ?? _createVNode(VStepperVerticalActions, {\n            \"onClick:next\": onClickNext,\n            \"onClick:prev\": onClickPrev\n          }, {\n            prev: slots.prev ? () => slots.prev?.(actionProps.value) : undefined,\n            next: slots.next ? () => slots.next?.(actionProps.value) : undefined\n          })]\n        })])\n      });\n    });\n    return {};\n  }\n});\n//# sourceMappingURL=VStepperVerticalItem.mjs.map",
      "start": 1723204989159,
      "end": 1723204989272,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1723204989272,
      "end": 1723204989272,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1723204989272,
      "end": 1723204989272,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1723204989272,
      "end": 1723204989272,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1723204989272,
      "end": 1723204989272,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1723204989272,
      "end": 1723204989272,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1723204989272,
      "end": 1723204989273,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1723204989273,
      "end": 1723204989273,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1723204989273,
      "end": 1723204989273,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1723204989273,
      "end": 1723204989273,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1723204989273,
      "end": 1723204989273,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1723204989273,
      "end": 1723204989273,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1723204989273,
      "end": 1723204989273,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1723204989273,
      "end": 1723204989273,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1723204989273,
      "end": 1723204989273,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1723204989273,
      "end": 1723204989273,
      "order": "normal"
    }
  ]
}
