{
  "resolvedId": "C:/Users/MAG/IdeaProjects/Datenanalysetool/src/main/vue-project/node_modules/vuetify/lib/components/VDataTable/composables/group.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "// Composables\nimport { useProxiedModel } from \"../../../composables/proxiedModel.mjs\"; // Utilities\nimport { computed, inject, provide, ref } from 'vue';\nimport { getObjectValueByPath, propsFactory } from \"../../../util/index.mjs\"; // Types\nexport const makeDataTableGroupProps = propsFactory({\n  groupBy: {\n    type: Array,\n    default: () => []\n  }\n}, 'DataTable-group');\nconst VDataTableGroupSymbol = Symbol.for('vuetify:data-table-group');\nexport function createGroupBy(props) {\n  const groupBy = useProxiedModel(props, 'groupBy');\n  return {\n    groupBy\n  };\n}\nexport function provideGroupBy(options) {\n  const {\n    groupBy,\n    sortBy\n  } = options;\n  const opened = ref(new Set());\n  const sortByWithGroups = computed(() => {\n    return groupBy.value.map(val => ({\n      ...val,\n      order: val.order ?? false\n    })).concat(sortBy.value);\n  });\n  function isGroupOpen(group) {\n    return opened.value.has(group.id);\n  }\n  function toggleGroup(group) {\n    const newOpened = new Set(opened.value);\n    if (!isGroupOpen(group)) newOpened.add(group.id);else newOpened.delete(group.id);\n    opened.value = newOpened;\n  }\n  function extractRows(items) {\n    function dive(group) {\n      const arr = [];\n      for (const item of group.items) {\n        if ('type' in item && item.type === 'group') {\n          arr.push(...dive(item));\n        } else {\n          arr.push(item);\n        }\n      }\n      return arr;\n    }\n    return dive({\n      type: 'group',\n      items,\n      id: 'dummy',\n      key: 'dummy',\n      value: 'dummy',\n      depth: 0\n    });\n  }\n\n  // onBeforeMount(() => {\n  //   for (const key of groupedItems.value.keys()) {\n  //     opened.value.add(key)\n  //   }\n  // })\n\n  const data = {\n    sortByWithGroups,\n    toggleGroup,\n    opened,\n    groupBy,\n    extractRows,\n    isGroupOpen\n  };\n  provide(VDataTableGroupSymbol, data);\n  return data;\n}\nexport function useGroupBy() {\n  const data = inject(VDataTableGroupSymbol);\n  if (!data) throw new Error('Missing group!');\n  return data;\n}\nfunction groupItemsByProperty(items, groupBy) {\n  if (!items.length) return [];\n  const groups = new Map();\n  for (const item of items) {\n    const value = getObjectValueByPath(item.raw, groupBy);\n    if (!groups.has(value)) {\n      groups.set(value, []);\n    }\n    groups.get(value).push(item);\n  }\n  return groups;\n}\nfunction groupItems(items, groupBy) {\n  let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let prefix = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'root';\n  if (!groupBy.length) return [];\n  const groupedItems = groupItemsByProperty(items, groupBy[0]);\n  const groups = [];\n  const rest = groupBy.slice(1);\n  groupedItems.forEach((items, value) => {\n    const key = groupBy[0];\n    const id = `${prefix}_${key}_${value}`;\n    groups.push({\n      depth,\n      id,\n      key,\n      value,\n      items: rest.length ? groupItems(items, rest, depth + 1, id) : items,\n      type: 'group'\n    });\n  });\n  return groups;\n}\nfunction flattenItems(items, opened) {\n  const flatItems = [];\n  for (const item of items) {\n    // TODO: make this better\n    if ('type' in item && item.type === 'group') {\n      if (item.value != null) {\n        flatItems.push(item);\n      }\n      if (opened.has(item.id) || item.value == null) {\n        flatItems.push(...flattenItems(item.items, opened));\n      }\n    } else {\n      flatItems.push(item);\n    }\n  }\n  return flatItems;\n}\nexport function useGroupedItems(items, groupBy, opened) {\n  const flatItems = computed(() => {\n    if (!groupBy.value.length) return items.value;\n    const groupedItems = groupItems(items.value, groupBy.value.map(item => item.key));\n    return flattenItems(groupedItems, opened.value);\n  });\n  return {\n    flatItems\n  };\n}\n//# sourceMappingURL=group.mjs.map",
      "start": 1722581518031,
      "end": 1722581518071,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1722581518071,
      "end": 1722581518071,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1722581518071,
      "end": 1722581518071,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1722581518071,
      "end": 1722581518071,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1722581518071,
      "end": 1722581518071,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1722581518071,
      "end": 1722581518072,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1722581518072,
      "end": 1722581518072,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1722581518072,
      "end": 1722581518072,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1722581518072,
      "end": 1722581518072,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1722581518072,
      "end": 1722581518072,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1722581518072,
      "end": 1722581518072,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1722581518072,
      "end": 1722581518072,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1722581518072,
      "end": 1722581518072,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1722581518072,
      "end": 1722581518072,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1722581518072,
      "end": 1722581518072,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1722581518072,
      "end": 1722581518072,
      "order": "normal"
    }
  ]
}
