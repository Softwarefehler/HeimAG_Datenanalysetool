{
  "resolvedId": "C:/Users/MAG/IdeaProjects/Datenanalysetool/src/main/vue-project/node_modules/vuetify/lib/labs/VTimePicker/VTimePicker.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { resolveDirective as _resolveDirective, mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\";\n// Styles\nimport \"./VTimePicker.css\";\n\n// Components\nimport { VTimePickerClock } from \"./VTimePickerClock.mjs\";\nimport { VTimePickerControls } from \"./VTimePickerControls.mjs\";\nimport { pad } from \"../../components/VDatePicker/util/index.mjs\";\nimport { makeVPickerProps, VPicker } from \"../VPicker/VPicker.mjs\"; // Composables\nimport { useLocale } from \"../../composables/locale.mjs\"; // Utilities\nimport { computed, onMounted, ref, watch } from 'vue';\nimport { SelectingTimes } from \"./SelectingTimes.mjs\";\nimport { createRange, genericComponent, omit, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\nconst rangeHours24 = createRange(24);\nconst rangeHours12am = createRange(12);\nconst rangeHours12pm = rangeHours12am.map(v => v + 12);\nconst range60 = createRange(60);\nconst selectingNames = {\n  1: 'hour',\n  2: 'minute',\n  3: 'second'\n};\nexport { SelectingTimes };\nexport const makeVTimePickerProps = propsFactory({\n  allowedHours: [Function, Array],\n  allowedMinutes: [Function, Array],\n  allowedSeconds: [Function, Array],\n  ampmInTitle: Boolean,\n  disabled: Boolean,\n  format: {\n    type: String,\n    default: 'ampm'\n  },\n  max: String,\n  min: String,\n  modelValue: null,\n  readonly: Boolean,\n  scrollable: Boolean,\n  useSeconds: Boolean,\n  ...omit(makeVPickerProps({\n    title: '$vuetify.timePicker.title'\n  }), ['landscape'])\n}, 'VTimePicker');\nexport const VTimePicker = genericComponent()({\n  name: 'VTimePicker',\n  props: makeVTimePickerProps(),\n  emits: {\n    'update:hour': val => val,\n    'update:minute': val => val,\n    'update:period': val => val,\n    'update:second': val => val,\n    'update:modelValue': val => val\n  },\n  setup(props, _ref) {\n    let {\n      emit,\n      slots\n    } = _ref;\n    const {\n      t\n    } = useLocale();\n    const inputHour = ref(null);\n    const inputMinute = ref(null);\n    const inputSecond = ref(null);\n    const lazyInputHour = ref(null);\n    const lazyInputMinute = ref(null);\n    const lazyInputSecond = ref(null);\n    const period = ref('am');\n    const selecting = ref(SelectingTimes.Hour);\n    const controlsRef = ref(null);\n    const clockRef = ref(null);\n    const isAllowedHourCb = computed(() => {\n      let cb;\n      if (props.allowedHours instanceof Array) {\n        cb = val => props.allowedHours.includes(val);\n      } else {\n        cb = props.allowedHours;\n      }\n      if (!props.min && !props.max) return cb;\n      const minHour = props.min ? Number(props.min.split(':')[0]) : 0;\n      const maxHour = props.max ? Number(props.max.split(':')[0]) : 23;\n      return val => {\n        return val >= minHour * 1 && val <= maxHour * 1 && (!cb || cb(val));\n      };\n    });\n    const isAllowedMinuteCb = computed(() => {\n      let cb;\n      const isHourAllowed = !isAllowedHourCb.value || inputHour.value === null || isAllowedHourCb.value(inputHour.value);\n      if (props.allowedMinutes instanceof Array) {\n        cb = val => props.allowedMinutes.includes(val);\n      } else {\n        cb = props.allowedMinutes;\n      }\n      if (!props.min && !props.max) {\n        return isHourAllowed ? cb : () => false;\n      }\n      const [minHour, minMinute] = props.min ? props.min.split(':').map(Number) : [0, 0];\n      const [maxHour, maxMinute] = props.max ? props.max.split(':').map(Number) : [23, 59];\n      const minTime = minHour * 60 + minMinute * 1;\n      const maxTime = maxHour * 60 + maxMinute * 1;\n      return val => {\n        const time = 60 * inputHour.value + val;\n        return time >= minTime && time <= maxTime && isHourAllowed && (!cb || cb(val));\n      };\n    });\n    const isAllowedSecondCb = computed(() => {\n      let cb;\n      const isHourAllowed = !isAllowedHourCb.value || inputHour.value === null || isAllowedHourCb.value(inputHour.value);\n      const isMinuteAllowed = isHourAllowed && (!isAllowedMinuteCb.value || inputMinute.value === null || isAllowedMinuteCb.value(inputMinute.value));\n      if (props.allowedSeconds instanceof Array) {\n        cb = val => props.allowedSeconds.includes(val);\n      } else {\n        cb = props.allowedSeconds;\n      }\n      if (!props.min && !props.max) {\n        return isMinuteAllowed ? cb : () => false;\n      }\n      const [minHour, minMinute, minSecond] = props.min ? props.min.split(':').map(Number) : [0, 0, 0];\n      const [maxHour, maxMinute, maxSecond] = props.max ? props.max.split(':').map(Number) : [23, 59, 59];\n      const minTime = minHour * 3600 + minMinute * 60 + (minSecond || 0) * 1;\n      const maxTime = maxHour * 3600 + maxMinute * 60 + (maxSecond || 0) * 1;\n      return val => {\n        const time = 3600 * inputHour.value + 60 * inputMinute.value + val;\n        return time >= minTime && time <= maxTime && isMinuteAllowed && (!cb || cb(val));\n      };\n    });\n    const isAmPm = computed(() => {\n      return props.format === 'ampm';\n    });\n    watch(() => props.modelValue, val => setInputData(val));\n    onMounted(() => {\n      setInputData(props.modelValue);\n    });\n    function genValue() {\n      if (inputHour.value != null && inputMinute.value != null && (!props.useSeconds || inputSecond.value != null)) {\n        return `${pad(inputHour.value)}:${pad(inputMinute.value)}` + (props.useSeconds ? `:${pad(inputSecond.value)}` : '');\n      }\n      return null;\n    }\n    function emitValue() {\n      const value = genValue();\n      if (value !== null) emit('update:modelValue', value);\n    }\n    function convert24to12(hour) {\n      return hour ? (hour - 1) % 12 + 1 : 12;\n    }\n    function convert12to24(hour, period) {\n      return hour % 12 + (period === 'pm' ? 12 : 0);\n    }\n    function setInputData(value) {\n      if (value == null || value === '') {\n        inputHour.value = null;\n        inputMinute.value = null;\n        inputSecond.value = null;\n      } else if (value instanceof Date) {\n        inputHour.value = value.getHours();\n        inputMinute.value = value.getMinutes();\n        inputSecond.value = value.getSeconds();\n      } else {\n        const [hour,, minute,, second, period] = value.trim().toLowerCase().match(/^(\\d+):(\\d+)(:(\\d+))?([ap]m)?$/) || new Array(6);\n        inputHour.value = period ? convert12to24(parseInt(hour, 10), period) : parseInt(hour, 10);\n        inputMinute.value = parseInt(minute, 10);\n        inputSecond.value = parseInt(second || 0, 10);\n      }\n      period.value = inputHour.value == null || inputHour.value < 12 ? 'am' : 'pm';\n    }\n    function firstAllowed(type, value) {\n      const allowedFn = type === 'hour' ? isAllowedHourCb.value : type === 'minute' ? isAllowedMinuteCb.value : isAllowedSecondCb.value;\n      if (!allowedFn) return value;\n\n      // TODO: clean up (Note from V2 code)\n      const range = type === 'minute' ? range60 : type === 'second' ? range60 : isAmPm.value ? value < 12 ? rangeHours12am : rangeHours12pm : rangeHours24;\n      const first = range.find(v => allowedFn((v + value) % range.length + range[0]));\n      return ((first || 0) + value) % range.length + range[0];\n    }\n    function setPeriod(val) {\n      period.value = val;\n      if (inputHour.value != null) {\n        const newHour = inputHour.value + (period.value === 'am' ? -12 : 12);\n        inputHour.value = firstAllowed('hour', newHour);\n      }\n      emit('update:period', val);\n      emitValue();\n      return true;\n    }\n    function onInput(value) {\n      if (selecting.value === SelectingTimes.Hour) {\n        inputHour.value = isAmPm.value ? convert12to24(value, period.value) : value;\n      } else if (selecting.value === SelectingTimes.Minute) {\n        inputMinute.value = value;\n      } else {\n        inputSecond.value = value;\n      }\n    }\n    function onChange(value) {\n      switch (selectingNames[selecting.value]) {\n        case 'hour':\n          emit('update:hour', value);\n          break;\n        case 'minute':\n          emit('update:minute', value);\n          break;\n        case 'second':\n          emit('update:second', value);\n          break;\n        default:\n          break;\n      }\n      const emitChange = selecting.value === (props.useSeconds ? SelectingTimes.Second : SelectingTimes.Minute);\n      if (selecting.value === SelectingTimes.Hour) {\n        selecting.value = SelectingTimes.Minute;\n      } else if (props.useSeconds && selecting.value === SelectingTimes.Minute) {\n        selecting.value = SelectingTimes.Second;\n      }\n      if (inputHour.value === lazyInputHour.value && inputMinute.value === lazyInputMinute.value && (!props.useSeconds || inputSecond.value === lazyInputSecond.value)) return;\n      const time = genValue();\n      if (time === null) return;\n      lazyInputHour.value = inputHour.value;\n      lazyInputMinute.value = inputMinute.value;\n      props.useSeconds && (lazyInputSecond.value = inputSecond.value);\n      emitChange && emitValue();\n    }\n    useRender(() => {\n      const pickerProps = VPicker.filterProps(props);\n      const timePickerControlsProps = VTimePickerControls.filterProps(props);\n      const timePickerClockProps = VTimePickerClock.filterProps(omit(props, ['format', 'modelValue', 'min', 'max']));\n      return _createVNode(VPicker, _mergeProps(pickerProps, {\n        \"color\": undefined,\n        \"class\": ['v-time-picker', props.class],\n        \"style\": props.style\n      }), {\n        title: () => slots.title?.() ?? _createVNode(\"div\", {\n          \"class\": \"v-time-picker__title\"\n        }, [t(props.title)]),\n        header: () => _createVNode(VTimePickerControls, _mergeProps(timePickerControlsProps, {\n          \"ampm\": isAmPm.value || props.ampmInTitle,\n          \"ampmReadonly\": isAmPm.value && !props.ampmInTitle,\n          \"hour\": inputHour.value,\n          \"minute\": inputMinute.value,\n          \"period\": period.value,\n          \"second\": inputSecond.value,\n          \"selecting\": selecting.value,\n          \"onUpdate:period\": val => setPeriod(val),\n          \"onUpdate:selecting\": value => selecting.value = value,\n          \"ref\": controlsRef\n        }), null),\n        default: () => _createVNode(VTimePickerClock, _mergeProps(timePickerClockProps, {\n          \"allowedValues\": selecting.value === SelectingTimes.Hour ? isAllowedHourCb.value : selecting.value === SelectingTimes.Minute ? isAllowedMinuteCb.value : isAllowedSecondCb.value,\n          \"double\": selecting.value === SelectingTimes.Hour && !isAmPm.value,\n          \"format\": selecting.value === SelectingTimes.Hour ? isAmPm.value ? convert24to12 : val => val : val => pad(val, 2),\n          \"max\": selecting.value === SelectingTimes.Hour ? isAmPm.value && period.value === 'am' ? 11 : 23 : 59,\n          \"min\": selecting.value === SelectingTimes.Hour && isAmPm.value && period.value === 'pm' ? 12 : 0,\n          \"size\": 20,\n          \"step\": selecting.value === SelectingTimes.Hour ? 1 : 5,\n          \"modelValue\": selecting.value === SelectingTimes.Hour ? inputHour.value : selecting.value === SelectingTimes.Minute ? inputMinute.value : inputSecond.value,\n          \"onChange\": onChange,\n          \"onInput\": onInput,\n          \"ref\": clockRef\n        }), null),\n        actions: slots.actions\n      });\n    });\n  }\n});\n//# sourceMappingURL=VTimePicker.mjs.map",
      "start": 1723160580786,
      "end": 1723160580952,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1723160580952,
      "end": 1723160580952,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1723160580952,
      "end": 1723160580952,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1723160580952,
      "end": 1723160580952,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1723160580952,
      "end": 1723160580952,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1723160580952,
      "end": 1723160580952,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1723160580952,
      "end": 1723160580952,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1723160580952,
      "end": 1723160580952,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1723160580952,
      "end": 1723160580952,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1723160580952,
      "end": 1723160580952,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1723160580952,
      "end": 1723160580952,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1723160580952,
      "end": 1723160580952,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1723160580952,
      "end": 1723160580952,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1723160580952,
      "end": 1723160580952,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1723160580952,
      "end": 1723160580953,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1723160580953,
      "end": 1723160580953,
      "order": "normal"
    }
  ]
}
