{
  "resolvedId": "C:/Users/MAG/IdeaProjects/Datenanalysetool/src/main/vue-project/node_modules/vuetify/lib/components/VSlideGroup/VSlideGroup.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createVNode as _createVNode } from \"vue\";\n// Styles\nimport \"./VSlideGroup.css\";\n\n// Components\nimport { VFadeTransition } from \"../transitions/index.mjs\";\nimport { VIcon } from \"../VIcon/index.mjs\"; // Composables\nimport { makeComponentProps } from \"../../composables/component.mjs\";\nimport { makeDisplayProps, useDisplay } from \"../../composables/display.mjs\";\nimport { useGoTo } from \"../../composables/goto.mjs\";\nimport { makeGroupProps, useGroup } from \"../../composables/group.mjs\";\nimport { IconValue } from \"../../composables/icons.mjs\";\nimport { useRtl } from \"../../composables/locale.mjs\";\nimport { useResizeObserver } from \"../../composables/resizeObserver.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\"; // Utilities\nimport { computed, shallowRef, watch } from 'vue';\nimport { calculateCenteredTarget, calculateUpdatedTarget, getClientSize, getOffsetSize, getScrollPosition, getScrollSize } from \"./helpers.mjs\";\nimport { focusableChildren, genericComponent, IN_BROWSER, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\nexport const VSlideGroupSymbol = Symbol.for('vuetify:v-slide-group');\nexport const makeVSlideGroupProps = propsFactory({\n  centerActive: Boolean,\n  direction: {\n    type: String,\n    default: 'horizontal'\n  },\n  symbol: {\n    type: null,\n    default: VSlideGroupSymbol\n  },\n  nextIcon: {\n    type: IconValue,\n    default: '$next'\n  },\n  prevIcon: {\n    type: IconValue,\n    default: '$prev'\n  },\n  showArrows: {\n    type: [Boolean, String],\n    validator: v => typeof v === 'boolean' || ['always', 'desktop', 'mobile'].includes(v)\n  },\n  ...makeComponentProps(),\n  ...makeDisplayProps({\n    mobile: null\n  }),\n  ...makeTagProps(),\n  ...makeGroupProps({\n    selectedClass: 'v-slide-group-item--active'\n  })\n}, 'VSlideGroup');\nexport const VSlideGroup = genericComponent()({\n  name: 'VSlideGroup',\n  props: makeVSlideGroupProps(),\n  emits: {\n    'update:modelValue': value => true\n  },\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const {\n      isRtl\n    } = useRtl();\n    const {\n      displayClasses,\n      mobile\n    } = useDisplay(props);\n    const group = useGroup(props, props.symbol);\n    const isOverflowing = shallowRef(false);\n    const scrollOffset = shallowRef(0);\n    const containerSize = shallowRef(0);\n    const contentSize = shallowRef(0);\n    const isHorizontal = computed(() => props.direction === 'horizontal');\n    const {\n      resizeRef: containerRef,\n      contentRect: containerRect\n    } = useResizeObserver();\n    const {\n      resizeRef: contentRef,\n      contentRect\n    } = useResizeObserver();\n    const goTo = useGoTo();\n    const goToOptions = computed(() => {\n      return {\n        container: containerRef.el,\n        duration: 200,\n        easing: 'easeOutQuart'\n      };\n    });\n    const firstSelectedIndex = computed(() => {\n      if (!group.selected.value.length) return -1;\n      return group.items.value.findIndex(item => item.id === group.selected.value[0]);\n    });\n    const lastSelectedIndex = computed(() => {\n      if (!group.selected.value.length) return -1;\n      return group.items.value.findIndex(item => item.id === group.selected.value[group.selected.value.length - 1]);\n    });\n    if (IN_BROWSER) {\n      let frame = -1;\n      watch(() => [group.selected.value, containerRect.value, contentRect.value, isHorizontal.value], () => {\n        cancelAnimationFrame(frame);\n        frame = requestAnimationFrame(() => {\n          if (containerRect.value && contentRect.value) {\n            const sizeProperty = isHorizontal.value ? 'width' : 'height';\n            containerSize.value = containerRect.value[sizeProperty];\n            contentSize.value = contentRect.value[sizeProperty];\n            isOverflowing.value = containerSize.value + 1 < contentSize.value;\n          }\n          if (firstSelectedIndex.value >= 0 && contentRef.el) {\n            // TODO: Is this too naive? Should we store element references in group composable?\n            const selectedElement = contentRef.el.children[lastSelectedIndex.value];\n            scrollToChildren(selectedElement, props.centerActive);\n          }\n        });\n      });\n    }\n    const isFocused = shallowRef(false);\n    function scrollToChildren(children, center) {\n      let target = 0;\n      if (center) {\n        target = calculateCenteredTarget({\n          containerElement: containerRef.el,\n          isHorizontal: isHorizontal.value,\n          selectedElement: children\n        });\n      } else {\n        target = calculateUpdatedTarget({\n          containerElement: containerRef.el,\n          isHorizontal: isHorizontal.value,\n          isRtl: isRtl.value,\n          selectedElement: children\n        });\n      }\n      scrollToPosition(target);\n    }\n    function scrollToPosition(newPosition) {\n      if (!IN_BROWSER || !containerRef.el) return;\n      const offsetSize = getOffsetSize(isHorizontal.value, containerRef.el);\n      const scrollPosition = getScrollPosition(isHorizontal.value, isRtl.value, containerRef.el);\n      const scrollSize = getScrollSize(isHorizontal.value, containerRef.el);\n      if (scrollSize <= offsetSize ||\n      // Prevent scrolling by only a couple of pixels, which doesn't look smooth\n      Math.abs(newPosition - scrollPosition) < 16) return;\n      if (isHorizontal.value && isRtl.value && containerRef.el) {\n        const {\n          scrollWidth,\n          offsetWidth: containerWidth\n        } = containerRef.el;\n        newPosition = scrollWidth - containerWidth - newPosition;\n      }\n      if (isHorizontal.value) {\n        goTo.horizontal(newPosition, goToOptions.value);\n      } else {\n        goTo(newPosition, goToOptions.value);\n      }\n    }\n    function onScroll(e) {\n      const {\n        scrollTop,\n        scrollLeft\n      } = e.target;\n      scrollOffset.value = isHorizontal.value ? scrollLeft : scrollTop;\n    }\n    function onFocusin(e) {\n      isFocused.value = true;\n      if (!isOverflowing.value || !contentRef.el) return;\n\n      // Focused element is likely to be the root of an item, so a\n      // breadth-first search will probably find it in the first iteration\n      for (const el of e.composedPath()) {\n        for (const item of contentRef.el.children) {\n          if (item === el) {\n            scrollToChildren(item);\n            return;\n          }\n        }\n      }\n    }\n    function onFocusout(e) {\n      isFocused.value = false;\n    }\n\n    // Affix clicks produce onFocus that we have to ignore to avoid extra scrollToChildren\n    let ignoreFocusEvent = false;\n    function onFocus(e) {\n      if (!ignoreFocusEvent && !isFocused.value && !(e.relatedTarget && contentRef.el?.contains(e.relatedTarget))) focus();\n      ignoreFocusEvent = false;\n    }\n    function onFocusAffixes() {\n      ignoreFocusEvent = true;\n    }\n    function onKeydown(e) {\n      if (!contentRef.el) return;\n      function toFocus(location) {\n        e.preventDefault();\n        focus(location);\n      }\n      if (isHorizontal.value) {\n        if (e.key === 'ArrowRight') {\n          toFocus(isRtl.value ? 'prev' : 'next');\n        } else if (e.key === 'ArrowLeft') {\n          toFocus(isRtl.value ? 'next' : 'prev');\n        }\n      } else {\n        if (e.key === 'ArrowDown') {\n          toFocus('next');\n        } else if (e.key === 'ArrowUp') {\n          toFocus('prev');\n        }\n      }\n      if (e.key === 'Home') {\n        toFocus('first');\n      } else if (e.key === 'End') {\n        toFocus('last');\n      }\n    }\n    function focus(location) {\n      if (!contentRef.el) return;\n      let el;\n      if (!location) {\n        const focusable = focusableChildren(contentRef.el);\n        el = focusable[0];\n      } else if (location === 'next') {\n        el = contentRef.el.querySelector(':focus')?.nextElementSibling;\n        if (!el) return focus('first');\n      } else if (location === 'prev') {\n        el = contentRef.el.querySelector(':focus')?.previousElementSibling;\n        if (!el) return focus('last');\n      } else if (location === 'first') {\n        el = contentRef.el.firstElementChild;\n      } else if (location === 'last') {\n        el = contentRef.el.lastElementChild;\n      }\n      if (el) {\n        el.focus({\n          preventScroll: true\n        });\n      }\n    }\n    function scrollTo(location) {\n      const direction = isHorizontal.value && isRtl.value ? -1 : 1;\n      const offsetStep = (location === 'prev' ? -direction : direction) * containerSize.value;\n      let newPosition = scrollOffset.value + offsetStep;\n\n      // TODO: improve it\n      if (isHorizontal.value && isRtl.value && containerRef.el) {\n        const {\n          scrollWidth,\n          offsetWidth: containerWidth\n        } = containerRef.el;\n        newPosition += scrollWidth - containerWidth;\n      }\n      scrollToPosition(newPosition);\n    }\n    const slotProps = computed(() => ({\n      next: group.next,\n      prev: group.prev,\n      select: group.select,\n      isSelected: group.isSelected\n    }));\n    const hasAffixes = computed(() => {\n      switch (props.showArrows) {\n        // Always show arrows on desktop & mobile\n        case 'always':\n          return true;\n\n        // Always show arrows on desktop\n        case 'desktop':\n          return !mobile.value;\n\n        // Show arrows on mobile when overflowing.\n        // This matches the default 2.2 behavior\n        case true:\n          return isOverflowing.value || Math.abs(scrollOffset.value) > 0;\n\n        // Always show on mobile\n        case 'mobile':\n          return mobile.value || isOverflowing.value || Math.abs(scrollOffset.value) > 0;\n\n        // https://material.io/components/tabs#scrollable-tabs\n        // Always show arrows when\n        // overflowed on desktop\n        default:\n          return !mobile.value && (isOverflowing.value || Math.abs(scrollOffset.value) > 0);\n      }\n    });\n    const hasPrev = computed(() => {\n      // 1 pixel in reserve, may be lost after rounding\n      return Math.abs(scrollOffset.value) > 1;\n    });\n    const hasNext = computed(() => {\n      if (!containerRef.value) return false;\n      const scrollSize = getScrollSize(isHorizontal.value, containerRef.el);\n      const clientSize = getClientSize(isHorizontal.value, containerRef.el);\n      const scrollSizeMax = scrollSize - clientSize;\n\n      // 1 pixel in reserve, may be lost after rounding\n      return scrollSizeMax - Math.abs(scrollOffset.value) > 1;\n    });\n    useRender(() => _createVNode(props.tag, {\n      \"class\": ['v-slide-group', {\n        'v-slide-group--vertical': !isHorizontal.value,\n        'v-slide-group--has-affixes': hasAffixes.value,\n        'v-slide-group--is-overflowing': isOverflowing.value\n      }, displayClasses.value, props.class],\n      \"style\": props.style,\n      \"tabindex\": isFocused.value || group.selected.value.length ? -1 : 0,\n      \"onFocus\": onFocus\n    }, {\n      default: () => [hasAffixes.value && _createVNode(\"div\", {\n        \"key\": \"prev\",\n        \"class\": ['v-slide-group__prev', {\n          'v-slide-group__prev--disabled': !hasPrev.value\n        }],\n        \"onMousedown\": onFocusAffixes,\n        \"onClick\": () => hasPrev.value && scrollTo('prev')\n      }, [slots.prev?.(slotProps.value) ?? _createVNode(VFadeTransition, null, {\n        default: () => [_createVNode(VIcon, {\n          \"icon\": isRtl.value ? props.nextIcon : props.prevIcon\n        }, null)]\n      })]), _createVNode(\"div\", {\n        \"key\": \"container\",\n        \"ref\": containerRef,\n        \"class\": \"v-slide-group__container\",\n        \"onScroll\": onScroll\n      }, [_createVNode(\"div\", {\n        \"ref\": contentRef,\n        \"class\": \"v-slide-group__content\",\n        \"onFocusin\": onFocusin,\n        \"onFocusout\": onFocusout,\n        \"onKeydown\": onKeydown\n      }, [slots.default?.(slotProps.value)])]), hasAffixes.value && _createVNode(\"div\", {\n        \"key\": \"next\",\n        \"class\": ['v-slide-group__next', {\n          'v-slide-group__next--disabled': !hasNext.value\n        }],\n        \"onMousedown\": onFocusAffixes,\n        \"onClick\": () => hasNext.value && scrollTo('next')\n      }, [slots.next?.(slotProps.value) ?? _createVNode(VFadeTransition, null, {\n        default: () => [_createVNode(VIcon, {\n          \"icon\": isRtl.value ? props.prevIcon : props.nextIcon\n        }, null)]\n      })])]\n    }));\n    return {\n      selected: group.selected,\n      scrollTo,\n      scrollOffset,\n      focus\n    };\n  }\n});\n//# sourceMappingURL=VSlideGroup.mjs.map",
      "start": 1722351594623,
      "end": 1722351594758,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1722351594759,
      "end": 1722351594759,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1722351594759,
      "end": 1722351594759,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1722351594759,
      "end": 1722351594759,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1722351594759,
      "end": 1722351594759,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1722351594759,
      "end": 1722351594759,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1722351594759,
      "end": 1722351594759,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1722351594759,
      "end": 1722351594759,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1722351594759,
      "end": 1722351594759,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1722351594759,
      "end": 1722351594759,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1722351594759,
      "end": 1722351594759,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1722351594759,
      "end": 1722351594759,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1722351594759,
      "end": 1722351594759,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1722351594759,
      "end": 1722351594759,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1722351594759,
      "end": 1722351594760,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1722351594760,
      "end": 1722351594760,
      "order": "normal"
    }
  ]
}
