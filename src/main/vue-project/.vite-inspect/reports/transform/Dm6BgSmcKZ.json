{
  "resolvedId": "C:/Users/MAG/IdeaProjects/Datenanalysetool/src/main/vue-project/node_modules/vuetify/lib/components/VParallax/VParallax.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createVNode as _createVNode, resolveDirective as _resolveDirective } from \"vue\";\n// Styles\nimport \"./VParallax.css\";\n\n// Components\nimport { VImg } from \"../VImg/index.mjs\"; // Composables\nimport { useDisplay } from \"../../composables/index.mjs\";\nimport { makeComponentProps } from \"../../composables/component.mjs\";\nimport { useIntersectionObserver } from \"../../composables/intersectionObserver.mjs\";\nimport { useResizeObserver } from \"../../composables/resizeObserver.mjs\"; // Utilities\nimport { computed, onBeforeUnmount, ref, watch, watchEffect } from 'vue';\nimport { clamp, genericComponent, getScrollParent, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\nfunction floor(val) {\n  return Math.floor(Math.abs(val)) * Math.sign(val);\n}\nexport const makeVParallaxProps = propsFactory({\n  scale: {\n    type: [Number, String],\n    default: 0.5\n  },\n  ...makeComponentProps()\n}, 'VParallax');\nexport const VParallax = genericComponent()({\n  name: 'VParallax',\n  props: makeVParallaxProps(),\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const {\n      intersectionRef,\n      isIntersecting\n    } = useIntersectionObserver();\n    const {\n      resizeRef,\n      contentRect\n    } = useResizeObserver();\n    const {\n      height: displayHeight\n    } = useDisplay();\n    const root = ref();\n    watchEffect(() => {\n      intersectionRef.value = resizeRef.value = root.value?.$el;\n    });\n    let scrollParent;\n    watch(isIntersecting, val => {\n      if (val) {\n        scrollParent = getScrollParent(intersectionRef.value);\n        scrollParent = scrollParent === document.scrollingElement ? document : scrollParent;\n        scrollParent.addEventListener('scroll', onScroll, {\n          passive: true\n        });\n        onScroll();\n      } else {\n        scrollParent.removeEventListener('scroll', onScroll);\n      }\n    });\n    onBeforeUnmount(() => {\n      scrollParent?.removeEventListener('scroll', onScroll);\n    });\n    watch(displayHeight, onScroll);\n    watch(() => contentRect.value?.height, onScroll);\n    const scale = computed(() => {\n      return 1 - clamp(+props.scale);\n    });\n    let frame = -1;\n    function onScroll() {\n      if (!isIntersecting.value) return;\n      cancelAnimationFrame(frame);\n      frame = requestAnimationFrame(() => {\n        const el = (root.value?.$el).querySelector('.v-img__img');\n        if (!el) return;\n        const scrollHeight = scrollParent instanceof Document ? document.documentElement.clientHeight : scrollParent.clientHeight;\n        const scrollPos = scrollParent instanceof Document ? window.scrollY : scrollParent.scrollTop;\n        const top = intersectionRef.value.getBoundingClientRect().top + scrollPos;\n        const height = contentRect.value.height;\n        const center = top + (height - scrollHeight) / 2;\n        const translate = floor((scrollPos - center) * scale.value);\n        const sizeScale = Math.max(1, (scale.value * (scrollHeight - height) + height) / height);\n        el.style.setProperty('transform', `translateY(${translate}px) scale(${sizeScale})`);\n      });\n    }\n    useRender(() => _createVNode(VImg, {\n      \"class\": ['v-parallax', {\n        'v-parallax--active': isIntersecting.value\n      }, props.class],\n      \"style\": props.style,\n      \"ref\": root,\n      \"cover\": true,\n      \"onLoadstart\": onScroll,\n      \"onLoad\": onScroll\n    }, slots));\n    return {};\n  }\n});\n//# sourceMappingURL=VParallax.mjs.map",
      "start": 1722351594531,
      "end": 1722351594627,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1722351594627,
      "end": 1722351594627,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1722351594627,
      "end": 1722351594627,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1722351594627,
      "end": 1722351594627,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1722351594627,
      "end": 1722351594627,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1722351594627,
      "end": 1722351594627,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1722351594627,
      "end": 1722351594627,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1722351594627,
      "end": 1722351594627,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1722351594627,
      "end": 1722351594627,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1722351594627,
      "end": 1722351594627,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1722351594627,
      "end": 1722351594627,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1722351594627,
      "end": 1722351594627,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1722351594627,
      "end": 1722351594627,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1722351594627,
      "end": 1722351594627,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1722351594627,
      "end": 1722351594627,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1722351594627,
      "end": 1722351594627,
      "order": "normal"
    }
  ]
}
